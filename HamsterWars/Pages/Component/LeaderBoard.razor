@page "/leaderboard"

@inject IHamsterData _db

<h3>Statistics</h3>


@if (hamsters is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th scope="col" class="sort-link" onclick="@(() => SortTable("Name"))">Name</th>
                <th scope="col">age</th>
                <th scope="col" class="sort-link" onclick="@(() => SortTable("Wins"))">Wins</th>
                <th scope="col">Win rate</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hamster in hamsters)
            {
                <tr>
                    <td>@hamster.Name</td>
                    <td>@hamster.Age</td>
                    <td>@hamster.Wins</td>
                    <td>@PercentCalculator.WinRateCalculator(@hamster.Wins,@hamster.Games)%</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {

    private List<HamsterModel> hamsters = new List<HamsterModel>();
    private bool IsSortedAscending;
    private string CurrentSortColumn;

    protected override async Task OnInitializedAsync()
    {
        if (hamsters.Count == 0)
        {
            hamsters = await _db.GetHamsters();
        }
    }

    /// <summary>
    /// Method for sorting table Sorts on name and Wins
    /// </summary>
    private void SortTable(string columnName)
    {
        if (columnName != CurrentSortColumn)
        {
            hamsters = hamsters.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            CurrentSortColumn = columnName;
            IsSortedAscending = true;
        }
        else
        {
            if (IsSortedAscending)
            {
                hamsters = hamsters.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            else
            {
                hamsters = hamsters.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            IsSortedAscending = !IsSortedAscending;
        }
    }
}

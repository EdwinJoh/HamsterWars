@page "/matchwinners/{id:int}"
@using DataAccessLibrary
@using DataAccessLibrary.Models
@inject IHamsterData _db
@inject IResultData _rb
<h1>Battle History</h1>

@if (SelectedHamster is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <img class="img-thumbnail w-25 center" src="/Content/Photos/@SelectedHamster.ImgName">
    <div class="center">
        <p>Name : @SelectedHamster.Name</p>
        <p>Age: @SelectedHamster.Age</p>
        <p>Favorite Food: @SelectedHamster.FavFood</p>
        <p>Favorite Activity: @SelectedHamster.Loves</p>
    </div>
    <table class="table table-dark">
        <thead>
            <tr>
                <th scope="col">Game</th>
                <th scope="col">Winner</th>
                <th scope="col">Looser</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var result in Results)
            {
                @if (result.WinnerId == id)
                {
                    <tr>
                        <td>@result.Id</td>
                        <td>@SelectedHamster.Name</td>
                        <td>@GetLoser(result.LoserId).Name</td>
                    </tr>

                }
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int id { get; set; }
    private HamsterModel? SelectedHamster { get; set; }
    public HamsterModel? LoserHamster { get; set; }
    private List<HamsterModel> hamsters = new List<HamsterModel>();
    private List<ResultModel> Results = new List<ResultModel>();


    protected override async Task OnInitializedAsync()
    {
        hamsters = await _db.GetHamsters();
        Results = await _rb.Getresult();
        SelectedHamster = hamsters.First(h => h.Id == id);
    }
    private HamsterModel GetLoser(int loserid)
    {
        LoserHamster = hamsters.Where(s => s.Id == loserid).Single();
        return LoserHamster;
    }

}
@page "/statistic"
@inject IHamsterData _db

@if (hamsters is null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <h3>Top 5 Winners</h3>
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Wins</th>
                <th scope="col">Defeats</th>
                <th scope="col">Games</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hamster in TopFiveWinners)
            {
                <tr>
                    <th scope="row">@hamster.Name</th>
                    <th scope="row">@hamster.Wins</th>
                    <th>@hamster.Defeats</th>
                    <th>@hamster.Games</th>
                </tr>
            }
        </tbody>

        <tbody>
            <h3>Top 5 Loser</h3>
            @foreach (var loser in TopFiveLooser)
            {
                <tr>
                    <th scope="row">@loser.Name</th>
                    <th scope="row">@loser.Wins</th>
                    <th>@loser.Games</th>
                    <th>@loser.Defeats</th>
                </tr>
            }
        </tbody>
    </table>


}
@code {

    List<HamsterModel> hamsters = new List<HamsterModel>();
    List<HamsterModel> TopFiveWinners = new List<HamsterModel>();
    List<HamsterModel> TopFiveLooser = new List<HamsterModel>();
    protected override async Task OnInitializedAsync()
    {
        if (hamsters.Count == 0)
        {
            hamsters = await _db.GetHamsters();
        }
        TopFiveWinners = hamsters.OrderByDescending(x => x.Wins).Take(5).ToList();
        TopFiveLooser = hamsters.OrderByDescending(x => x.Defeats).Take(5).ToList();
    }
}
